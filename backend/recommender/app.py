from flask import Flask, request, jsonify
from hybrid import hybrid_recommend
from auto_trainer import start_auto_trainer
from model_state import model_summary, model_data
import os

app = Flask(__name__)

# üöÄ Ch·ªâ kh·ªüi ƒë·ªông auto-trainer 1 l·∫ßn khi Flask reload
if not app.debug or os.environ.get("WERKZEUG_RUN_MAIN") == "true":
    start_auto_trainer(interval=60)


# ==========================================================
# üß† API ch√≠nh: G·ª£i √Ω qu√°n ƒÉn
# ==========================================================
@app.route("/recommend", methods=["GET"])
def recommend():
    try:
        user_id = request.args.get("user_id", type=int)
        top_n = request.args.get("top_n", default=5, type=int)
        alpha_cf = request.args.get("alpha_cf", default=0.6, type=float)
        alpha_cbf = request.args.get("alpha_cbf", default=0.4, type=float)
        min_ratings = request.args.get("min_ratings", default=1, type=int)

        if user_id is None:
            return jsonify({"error": "user_id is required"}), 400

        # Ki·ªÉm tra model ƒë√£ s·∫µn s√†ng ch∆∞a
        if (
            model_data.get("all_data") is None or
            model_data.get("restaurants") is None
        ):
            return jsonify({"error": "Model ch∆∞a s·∫µn s√†ng, vui l√≤ng th·ª≠ l·∫°i sau"}), 503

        # üîπ G·ªçi h√†m g·ª£i √Ω
        top_recs = hybrid_recommend(
            user_id=user_id,
            top_n=top_n,
            alpha_cf=alpha_cf,
            alpha_cbf=alpha_cbf,
            min_ratings=min_ratings
        )

        recommendations = top_recs.rename(columns={'score_final': 'score'}).to_dict(orient='records')

        return jsonify({
            "user_id": user_id,
            "recommendations": recommendations
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ==========================================================
# üîç API ki·ªÉm tra tr·∫°ng th√°i model
# ==========================================================
@app.route("/model-status", methods=["GET"])
def model_status():
    return jsonify(model_summary())


# ==========================================================
# üöÄ Kh·ªüi ch·∫°y server Flask
# ==========================================================
if __name__ == "__main__":
    app.run(host="172.20.10.10", port=5000, debug=False)

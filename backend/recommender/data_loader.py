# ==========================================================
# data_loader.py ‚Äî Load d·ªØ li·ªáu t·ª´ MySQL cho h·ªá th·ªëng AI
# ----------------------------------------------------------
# Cung c·∫•p c√°c h√†m load t·ª´ng b·∫£ng v√† g·ªôp d·ªØ li·ªáu h√†nh vi
# S·ª≠ d·ª•ng b·ªüi auto_trainer.py ƒë·ªÉ hu·∫•n luy·ªán CF + CBF
# ==========================================================

import pandas as pd
from sqlalchemy import create_engine, text

# --- C·∫•u h√¨nh MySQL ---
DB_USER = "root"
DB_PASSWORD = ""   # ƒë·ªÉ tr·ªëng n·∫øu d√πng XAMPP m·∫∑c ƒë·ªãnh
DB_HOST = "127.0.0.1"
DB_PORT = "3306"
DB_NAME = "foodreview"


# ==========================================================
# üß† H√†m t·∫°o engine k·∫øt n·ªëi
# ==========================================================
def get_engine():
    """T·∫°o k·∫øt n·ªëi MySQL qua SQLAlchemy."""
    url = f"mysql+pymysql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
    return create_engine(
        url,
        pool_pre_ping=True,   # ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc khi d√πng
        pool_recycle=3600,    # reset k·∫øt n·ªëi sau 1h tr√°nh timeout
        echo=False
    )


# ==========================================================
# 1Ô∏è‚É£ Load t·ª´ng b·∫£ng g·ªëc
# ==========================================================
def load_reviews():
    """B·∫£ng reviews (user_id, restaurant_id, rating, content)."""
    query = "SELECT user_id, restaurant_id, rating, content FROM reviews"
    with get_engine().connect() as conn:
        df = pd.read_sql(text(query), conn)
    return df


def load_favorites():
    """B·∫£ng favorites, quy ƒë·ªïi th√†nh rating = 5."""
    query = "SELECT user_id, restaurant_id, 5 AS rating FROM favorites"
    with get_engine().connect() as conn:
        df = pd.read_sql(text(query), conn)
    return df


def load_likes():
    """B·∫£ng likes (user_id, review_id) -> rating = 2."""
    query = """
        SELECT l.user_id, r.restaurant_id, 2 AS rating
        FROM likes l
        JOIN reviews r ON l.review_id = r.id
    """
    with get_engine().connect() as conn:
        df = pd.read_sql(text(query), conn)
    return df


def load_comments():
    """B·∫£ng comments (user_id, review_id) -> rating = 1."""
    query = """
        SELECT c.user_id, r.restaurant_id, 1 AS rating
        FROM comments c
        JOIN reviews r ON c.review_id = r.id
    """
    with get_engine().connect() as conn:
        df = pd.read_sql(text(query), conn)
    return df


def load_restaurants():
    """B·∫£ng restaurants (id, name, address, category_id, description...)."""
    query = """
        SELECT id, name, address, latitude, longitude, category_id, description
        FROM restaurants
    """
    with get_engine().connect() as conn:
        df = pd.read_sql(text(query), conn)
    return df


def load_categories():
    """B·∫£ng categories (id, name)."""
    query = "SELECT id, name FROM categories"
    with get_engine().connect() as conn:
        df = pd.read_sql(text(query), conn)
    return df


def load_users():
    """B·∫£ng users (id, name)."""
    query = "SELECT id, name FROM users"
    with get_engine().connect() as conn:
        df = pd.read_sql(text(query), conn)
    return df


# ==========================================================
# 2Ô∏è‚É£ G·ªôp d·ªØ li·ªáu cho hu·∫•n luy·ªán CF + CBF
# ==========================================================
def load_all_data():
    """
    G·ªôp t·∫•t c·∫£ h√†nh vi (reviews + favorites + likes + comments)
    th√†nh 1 DataFrame duy nh·∫•t: user_id, restaurant_id, rating
    """
    try:
        reviews = load_reviews()[["user_id", "restaurant_id", "rating"]]
        favorites = load_favorites()[["user_id", "restaurant_id", "rating"]]
        likes = load_likes()[["user_id", "restaurant_id", "rating"]]
        comments = load_comments()[["user_id", "restaurant_id", "rating"]]

        # G·ªôp t·∫•t c·∫£ h√†nh vi
        all_data = pd.concat(
            [reviews, favorites, likes, comments],
            ignore_index=True
        )

        # Gom nh√≥m l·∫•y trung b√¨nh n·∫øu user c√≥ nhi·ªÅu h√†nh vi tr√™n c√πng qu√°n
        all_data = (
            all_data.groupby(["user_id", "restaurant_id"])
            .rating.mean()
            .reset_index()
        )

        print(f"‚úÖ Load d·ªØ li·ªáu hu·∫•n luy·ªán th√†nh c√¥ng: {len(all_data)} b·∫£n ghi.")
        return all_data

    except Exception as e:
        print(f"‚ùå [data_loader] L·ªói khi load d·ªØ li·ªáu: {e}")
        return pd.DataFrame(columns=["user_id", "restaurant_id", "rating"])
